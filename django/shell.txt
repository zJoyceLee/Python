import django
django.setup()

from polls.models import Question, Choice

from django.utils import timezone
q = Question(question_text="What's new?", pub_date=timezone.now())
q.save()
q.id
q.question_text
q.pub_date

q.question_text="What's up?"
q.save()

Question.objects.all()



--------------------------------------------------
» python manage.py shell                                                                                                                                       joyce@joyce-XPS-13-9343
Python 2.7.6 (default, Jun 22 2015, 17:58:13)
Type "copyright", "credits" or "license" for more information.

IPython 1.2.1 -- An enhanced Interactive Python.
?         -> Introduction and overview of IPython's features.
%quickref -> Quick reference.
help      -> Python's own help system.
object?   -> Details about 'object', use 'object??' for extra details.

In [1]: import django

In [2]: django.setup()

In [3]:

In [3]: from polls.models import Question, Choice

In [4]:

In [4]: from django.utils import timezone

In [5]: q = Question(question_text="What's new?", pub_date=timezone.now())

In [6]: q.save()

In [7]: q.id
Out[7]: 1

In [8]: q.question_text
Out[8]: "What's new?"

In [9]: q.pub_date
Out[9]: datetime.datetime(2016, 3, 28, 3, 22, 3, 344202, tzinfo=<UTC>)

In [10]:

In [10]: q.question_text="What's up?"

In [11]: q.save()

In [12]:

In [12]: Question.objects.all()
Out[12]: [<Question: Question object>]

In [13]:


--------------------------------------------------------------------------------
from polls.models import Question, Choice
Question.objects.all()

Question.objects.filter(id=1)
Question.objects.filter(question_text_startswith="What")

from django.utils import timezone
current_year = timezone.now().year
Question.objects.get(pub_date__year=current_year)

Question.objects.get(id=2)

Question.objects.get(pk=1)
q = Question.objects.get(pk=1)
q.was_published_recently()

q = Questien.objects.get(pk=1)
q.choice_set.all()

q.choice_set.create(choice_text='Not much', votes=0)
q.choice_set.create(choice_text='The sky', votes=0)
c = q.choice_set.create(choice_text='Just hacking again', votes=0)
c.question

q.choice_set.all()
q.choice_set.count()

Choice.objects.filter(question__pub_date__year=current_year)

c=q.choice_set.filter(choice_text__startswith='Just hacking')
c.delete()


--------------------------------------------------------------------------------
~/Code/Python/django/mysite(branch:master*)
» python manage.py shell                                                                                                                                       joyce@joyce-XPS-13-9343
Python 2.7.6 (default, Jun 22 2015, 17:58:13)
Type "copyright", "credits" or "license" for more information.

IPython 1.2.1 -- An enhanced Interactive Python.
?         -> Introduction and overview of IPython's features.
%quickref -> Quick reference.
help      -> Python's own help system.
object?   -> Details about 'object', use 'object??' for extra details.

In [1]: from polls.models import Question, Choice

In [2]: Question.objects.all()
Out[2]: [<Question: What's up?>]

In [3]:

In [3]: Question.objects.filter(id=1)
Out[3]: [<Question: What's up?>]

In [4]: Question.objects.filter(question_text_startswith="What")
---------------------------------------------------------------------------
FieldError                                Traceback (most recent call last)
<ipython-input-4-9a4431721125> in <module>()
----> 1 Question.objects.filter(question_text_startswith="What")

/usr/local/lib/python2.7/dist-packages/django/db/models/manager.pyc in manager_method(self, *args, **kwargs)
    120         def create_method(name, method):
    121             def manager_method(self, *args, **kwargs):
--> 122                 return getattr(self.get_queryset(), name)(*args, **kwargs)
    123             manager_method.__name__ = method.__name__
    124             manager_method.__doc__ = method.__doc__

/usr/local/lib/python2.7/dist-packages/django/db/models/query.pyc in filter(self, *args, **kwargs)
    788         set.
    789         """
--> 790         return self._filter_or_exclude(False, *args, **kwargs)
    791
    792     def exclude(self, *args, **kwargs):

/usr/local/lib/python2.7/dist-packages/django/db/models/query.pyc in _filter_or_exclude(self, negate, *args, **kwargs)
    806             clone.query.add_q(~Q(*args, **kwargs))
    807         else:
--> 808             clone.query.add_q(Q(*args, **kwargs))
    809         return clone
    810

/usr/local/lib/python2.7/dist-packages/django/db/models/sql/query.pyc in add_q(self, q_object)
   1241         existing_inner = set(
   1242             (a for a in self.alias_map if self.alias_map[a].join_type == INNER))
-> 1243         clause, _ = self._add_q(q_object, self.used_aliases)
   1244         if clause:
   1245             self.where.add(clause, AND)

/usr/local/lib/python2.7/dist-packages/django/db/models/sql/query.pyc in _add_q(self, q_object, used_aliases, branch_negated, current_negated, allow_joins, split_subq)
   1267                     child, can_reuse=used_aliases, branch_negated=branch_negated,
   1268                     current_negated=current_negated, connector=connector,
-> 1269                     allow_joins=allow_joins, split_subq=split_subq,
   1270                 )
   1271                 joinpromoter.add_votes(needed_inner)

/usr/local/lib/python2.7/dist-packages/django/db/models/sql/query.pyc in build_filter(self, filter_expr, branch_negated, current_negated, can_reuse, connector, allow_joins, split_subq)
   1147         if not arg:
   1148             raise FieldError("Cannot parse keyword query %r" % arg)
-> 1149         lookups, parts, reffed_expression = self.solve_lookup_type(arg)
   1150         if not allow_joins and len(parts) > 1:
   1151             raise FieldError("Joined field references are not permitted in this query")

/usr/local/lib/python2.7/dist-packages/django/db/models/sql/query.pyc in solve_lookup_type(self, lookup)
   1033             if expression:
   1034                 return expression_lookups, (), expression
-> 1035         _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
   1036         field_parts = lookup_splitted[0:len(lookup_splitted) - len(lookup_parts)]
   1037         if len(lookup_parts) == 0:

/usr/local/lib/python2.7/dist-packages/django/db/models/sql/query.pyc in names_to_path(self, names, opts, allow_many, fail_on_missing)
   1328                     available = sorted(field_names + list(self.annotation_select))
   1329                     raise FieldError("Cannot resolve keyword %r into field. "
-> 1330                                      "Choices are: %s" % (name, ", ".join(available)))
   1331                 break
   1332             # Check if we need any joins for concrete inheritance cases (the

FieldError: Cannot resolve keyword 'question_text_startswith' into field. Choices are: choice, id, pub_date, question_text

In [5]:

In [5]: from django.utils import timezone

In [6]: current_year = timezone.now().year

In [7]: Question.objects.get(pub_date__year=current_year)
Out[7]: <Question: What's up?>

In [8]:

In [8]: Question.objects.get(id=2)
---------------------------------------------------------------------------
DoesNotExist                              Traceback (most recent call last)
<ipython-input-8-e5ad49b3e3e3> in <module>()
----> 1 Question.objects.get(id=2)

/usr/local/lib/python2.7/dist-packages/django/db/models/manager.pyc in manager_method(self, *args, **kwargs)
    120         def create_method(name, method):
    121             def manager_method(self, *args, **kwargs):
--> 122                 return getattr(self.get_queryset(), name)(*args, **kwargs)
    123             manager_method.__name__ = method.__name__
    124             manager_method.__doc__ = method.__doc__

/usr/local/lib/python2.7/dist-packages/django/db/models/query.pyc in get(self, *args, **kwargs)
    385             raise self.model.DoesNotExist(
    386                 "%s matching query does not exist." %
--> 387                 self.model._meta.object_name
    388             )
    389         raise self.model.MultipleObjectsReturned(

DoesNotExist: Question matching query does not exist.

In [9]:

In [9]: Question.objects.get(pk=1)
Out[9]: <Question: What's up?>

In [10]: q = Question.objects.get(pk=1)

In [11]: q.was_published_recently()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-11-3ba4aeb6d002> in <module>()
----> 1 q.was_published_recently()

/home/joyce/Code/Python/django/mysite/polls/models.pyc in was_published_recently(self)
     16         return self.question_text
     17     def was_published_recently(self):
---> 18         return self.pub_date >= timezone.now() - datetime.timedelat(days=1)
     19
     20

AttributeError: 'module' object has no attribute 'timedelat'

In [12]:

In [12]: q = Questien.objects.get(pk=1)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-12-8b66c281d27f> in <module>()
----> 1 q = Questien.objects.get(pk=1)

NameError: name 'Questien' is not defined

In [13]: q.choice_set.all()
Out[13]: []

In [14]:

In [14]: q.choice_set.create(choice_text='Not much', votes=0)
Out[14]: <Choice: Not much>

In [15]: q.choice_set.create(choice_text='The sky', votes=0)
Out[15]: <Choice: The sky>

In [16]: c = q.choice_set.create(choice_text='Just hacking again', votes=0)

In [17]: c.question
Out[17]: <Question: What's up?>

In [18]:

In [18]: q.choice_set.all()
Out[18]: [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]

In [19]: q.choice_set.count()
Out[19]: 3

In [20]:

In [20]: Choice.objects.filter(question__pub_date__year=current_year)
Out[20]: [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]

In [21]:

In [21]: c=q.choice_set.filter(choice_text__startswith='Just hacking')

In [22]: c.delete()
Out[22]: (1, {u'polls.Choice': 1})

In [23]:
